import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
print("Bot function started!")
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, Update
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from datetime import datetime, timedelta
from google_sheets import get_sheet, row_to_user, upload_photo_to_drive, COLUMNS, delete_user_by_telegram_id, normalize_header
import gspread
# --- –î–ª—è –≤–µ–±—Ö—É–∫–æ–≤ ---
import logging
from aiohttp import web

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# API_TOKEN = "7427155199:AAEqoEJw71PwOdnGFCQVLNV8ueskJ3gglBo"
API_TOKEN = os.environ.get("TELEGRAM_API_TOKEN")
if not API_TOKEN:
    raise RuntimeError("TELEGRAM_API_TOKEN is not set in environment variables!")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±—Ö—É–∫–∞ ---
WEBHOOK_PATH = "/webhook"
WEBHOOK_BASE_URL = os.environ.get("WEBHOOK_BASE_URL", "https://685a75f4003afd31f1be.fra.appwrite.run")
WEBHOOK_URL = WEBHOOK_BASE_URL.rstrip("/") + WEBHOOK_PATH
USE_WEBHOOK = os.environ.get("USE_WEBHOOK", "0") == "1"

# --- –î–ª—è –¥–µ–ø–ª–æ—è —á–µ—Ä–µ–∑ Appwrite: —Å–æ–∑–¥–∞—ë–º credentials.json –∏–∑ —Å–µ–∫—Ä–µ—Ç–∞ ---
CREDENTIALS_PATH = "/tmp/credentials.json"
if os.environ.get("GOOGLE_CREDENTIALS"):
    with open(CREDENTIALS_PATH, "w") as f:
        f.write(os.environ["GOOGLE_CREDENTIALS"])
    print(f"[INFO] credentials.json written to {CREDENTIALS_PATH}")
else:
    print("[WARN] GOOGLE_CREDENTIALS env var not set!")

# --- –ö–≠–® –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
users_cache = {}

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ ---
def load_users_cache():
    ws = get_sheet()
    records = ws.get_all_values()
    from google_sheets import get_header_mapping
    header_mapping = get_header_mapping(ws)
    for row in records[1:]:
        user = row_to_user(row, header_mapping)
        users_cache[user['Telegram ID']] = user

# --- –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: —Å–Ω–∞—á–∞–ª–∞ –∫—ç—à, –ø–æ—Ç–æ–º Google Sheets ---
def get_user(user_id):
    user = users_cache.get(str(user_id))
    if user is None:
        from google_sheets import get_user as gs_get_user
        user = gs_get_user(user_id)
        if user:
            users_cache[str(user_id)] = user
    return user

# --- –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
def add_user(user_id, name, username=""):
    from google_sheets import add_user as gs_add_user, get_user as gs_get_user
    gs_add_user(user_id, name, username)
    user = gs_get_user(user_id)
    if user:
        users_cache[str(user_id)] = user

# --- –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
def update_user(user_id, data):
    from google_sheets import update_user as gs_update_user, get_user as gs_get_user, COLUMNS
    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –≤—Å–µ –∫–ª—é—á–∏ –µ—Å—Ç—å
    for col in COLUMNS:
        if col not in data:
            data[col] = ''
    gs_update_user(user_id, data)
    user = gs_get_user(user_id)
    if user:
        users_cache[str(user_id)] = user

# --- –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫—ç—à–∞ ---
def delete_user_by_username(username):
    for user_id, user in list(users_cache.items()):
        if user.get('–ù–∏–∫–Ω–µ–π–º', '').lower() == username.lower():
            del users_cache[user_id]
            return True
    return False

# --- –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ) ---
async def _upload_photo_and_update_user(user_id, local_path):
    from google_sheets import upload_photo_to_drive
    drive_link = upload_photo_to_drive(local_path, os.path.basename(local_path))
    os.remove(local_path)
    user = get_user(user_id)
    if user:
        user['–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ'] = drive_link
        update_user(user_id, user)

# --- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–∏–∫–Ω–µ–π–º—É: —Å–Ω–∞—á–∞–ª–∞ –∫—ç—à, –ø–æ—Ç–æ–º Google Sheets ---
def get_user_by_username_anywhere(username):
    username = username.lstrip('@')
    # 1. –ü–æ–∏—Å–∫ –≤ –∫—ç—à–µ
    for user in users_cache.values():
        if user.get('–ù–∏–∫–Ω–µ–π–º', '').lower() == username.lower():
            return user, 'cache'
    # 2. –ü–æ–∏—Å–∫ –≤ Google Sheets
    ws = get_sheet()
    records = ws.get_all_values()
    from google_sheets import get_header_mapping
    header_mapping = get_header_mapping(ws)
    norm_nickname = None
    for code_key in COLUMNS:
        if '–Ω–∏–∫–Ω–µ–π–º' in code_key.lower():
            norm_nickname = get_header_mapping(ws).get(normalize_header(code_key), (None, 1))[1]
            break
    for row in records[1:]:
        if len(row) > norm_nickname and row[norm_nickname].lower() == username.lower():
            return row_to_user(row, header_mapping), 'sheet'
    return None, None

# --- sync_users_cache: —É–º–µ–Ω—å—à–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ 15 —Å–µ–∫—É–Ω–¥ ---
async def sync_users_cache():
    while True:
        ws = get_sheet()
        from google_sheets import get_header_mapping, find_user_row, update_user, add_user
        header_mapping = get_header_mapping(ws)
        records = ws.get_all_values()
        # –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ Telegram ID -> (row_idx, row_dict)
        sheet_users = {}
        for idx, row in enumerate(records[1:], start=2):  # –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –∑–∞–≥–æ–ª–æ–≤–∫–∏
            user = row_to_user(row, header_mapping)
            sheet_users[user['Telegram ID']] = (idx, user)
        # –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã—Ö
        for telegram_id, cache_user in users_cache.items():
            sheet_entry = sheet_users.get(telegram_id)
            if sheet_entry:
                idx, sheet_user = sheet_entry
                # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å
                if any(str(cache_user.get(col, '')) != str(sheet_user.get(col, '')) for col in COLUMNS):
                    row = [cache_user.get(col, '') for col in COLUMNS]
                    start_col = gspread.utils.rowcol_to_a1(1, 1)[0]
                    end_col = gspread.utils.rowcol_to_a1(1, len(header_mapping))[0]
                    ws.update(f'{start_col}{idx}:{end_col}{idx}', [row])
            else:
                # –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                add_user(cache_user['Telegram ID'], cache_user.get('–ò–º—è', ''), cache_user.get('–ù–∏–∫–Ω–µ–π–º', ''))
                # –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        print(f"[SYNC] Users cache synced at {datetime.now()}")
        await asyncio.sleep(15)  # 15 —Å–µ–∫—É–Ω–¥

# –£—Å–ª–æ–≤–∏—è –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ "–†–µ–∑–∏–¥–µ–Ω—Ç"
CONDITIONS = [
    "–ü—Ä–∏—à—ë–ª –º–∏–Ω–∏–º—É–º –æ–¥–∏–Ω —Ä–∞–∑",
    "–ü—Ä–∏–≤—ë–ª –¥—Ä—É–≥–∞",
    "–ò—Å—Ç–æ—Ä–∏—è –∏–∑ –∑–∞–ª–∞",
    "–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–µ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ",
    "–§–æ—Ç–æ —Å —Ç–∞–±–ª–∏—á–∫–æ–π",
    "3 –ø–æ—Å–µ—â–µ–Ω–∏—è –ø–æ–¥—Ä—è–¥"
]

# –ù–∞–≥—Ä–∞–¥—ã
REWARDS = [
    (1, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –∫ –∫–µ–π—Ç–µ—Ä–∏–Ω–≥—É! üòã"),
    (5, "–ë—Ä–æ–Ω—å –º–µ—Å—Ç–∞ –≤ –ø–µ—Ä–≤–æ–º —Ä—è–¥—É (5 –º–µ—Å—Ç) üí∫"),
    (10, "–ü–∏—Ü—Ü–∞ —Å —Å–æ–±–æ–π üçï"),
    (15, "–§—É—Ç–±–æ–ª–∫–∞ –∏–ª–∏ —Ö—É–¥–∏ üëï")
]

# FSM –¥–ª—è —á–µ–∫-–∏–Ω–∞ —Å —Ñ–æ—Ç–æ
class CheckinPhoto(StatesGroup):
    waiting_for_photo = State()

# FSM –¥–ª—è —Ñ–æ—Ç–æ —Å –¥—Ä—É–≥–æ–º
class FriendPhoto(StatesGroup):
    waiting_for_photo = State()

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ó–∞—á–µ–∫–∏–Ω–∏—Ç—å—Å—è ‚úîÔ∏è")],
        [KeyboardButton(text="–ü—Ä–æ–≥—Ä–µ—Å—Å ‚úèÔ∏è")],
        [KeyboardButton(text="–ë–∞–ª–∞–Ω—Å üè¶")]
    ],
    resize_keyboard=True
)

# –•–µ–ª–ø–µ—Ä: —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–∫–æ–ª—å–∫–æ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –Ω–∞–≥—Ä–∞–¥—ã
def next_reward(balance):
    for points, reward in REWARDS:
        if balance < points:
            return points - balance, reward
    return None, None

def parse_visits(visits_str):
    if not visits_str:
        return []
    return [datetime.strptime(d, "%Y-%m-%d").date() for d in visits_str.split(",") if d]

def visits_to_str(visits):
    return ",".join([str(d) for d in visits])

def get_conditions(user):
    conds = [False]*6
    if user['–ë–∞–ª–ª—ã'] > 0:
        conds[0] = True
    if user['–ü—Ä–∏–≤–µ–ª –¥—Ä—É–≥–∞'] == 'yes':
        conds[1] = True
    if user['–ò—Å—Ç–æ—Ä–∏—è'] == 'yes':
        conds[2] = True
    if user['–í—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ'] == 'yes':
        conds[3] = True
    if user.get('–§–æ—Ç–æ —Å —Ç–∞–±–ª–∏—á–∫–æ–π', '') == 'yes':
        conds[4] = True
    if user['3 –≤–∏–∑–∏—Ç–∞ –ø–æ–¥—Ä—è–¥'] == 'yes':
        conds[5] = True
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞
    if all(conds):
        if user.get('–†–µ–∑–∏–¥–µ–Ω—Ç') != 'yes':
            user['–†–µ–∑–∏–¥–µ–Ω—Ç'] = 'yes'
            update_user(user['Telegram ID'], user)
    else:
        if user.get('–†–µ–∑–∏–¥–µ–Ω—Ç') != 'no':
            user['–†–µ–∑–∏–¥–µ–Ω—Ç'] = 'no'
            update_user(user['Telegram ID'], user)
    return conds

def get_main_kb(user):
    visits = parse_visits(user['–î–∞—Ç—ã –ø–æ—Å–µ—â–µ–Ω–∏–π'])
    today = datetime.now().date()
    if visits and visits[-1] == today:
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–ü—Ä–æ–≥—Ä–µ—Å—Å ‚úèÔ∏è")],
                [KeyboardButton(text="–ë–∞–ª–∞–Ω—Å üè¶")]
            ],
            resize_keyboard=True
        )
    else:
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–ó–∞—á–µ–∫–∏–Ω–∏—Ç—å—Å—è ‚úîÔ∏è")],
                [KeyboardButton(text="–ü—Ä–æ–≥—Ä–µ—Å—Å ‚úèÔ∏è")],
                [KeyboardButton(text="–ë–∞–ª–∞–Ω—Å üè¶")]
            ],
            resize_keyboard=True
        )

# --- –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ ---
ADMINS = {216453}

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username (–Ω–∏–∫–Ω–µ–π–º—É) ---
def get_user_by_username(username):
    username = username.lstrip('@')
    for user in users_cache.values():
        if user.get('–ù–∏–∫–Ω–µ–π–º', '').lower() == username.lower():
            return user
    return None

@dp.message(Command("start"))
async def cmd_start(message: Message):
    user_id = message.from_user.id
    name = message.from_user.full_name
    username = message.from_user.username or ""
    # –ë—ã—Å—Ç—Ä—ã–π UX: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
    thinking_msg = await message.answer("–ó–∞–≤–æ–∂—É –º–æ—Ç–æ—Ä... üèéÔ∏è")
    user = get_user(user_id)
    if not user:
        add_user(user_id, name, username)
        user = get_user(user_id)
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è —Å—Ä–∞–∑—É
        user['last_checkin_ts'] = ''
        user['last_condition_ts'] = ''
        user['conditions_after_checkin'] = '0'
        update_user(user_id, user)
    else:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –∏ –Ω–∏–∫–Ω–µ–π–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å
        user['–ò–º—è'] = name
        user['–ù–∏–∫–Ω–µ–π–º'] = username
        update_user(user_id, user)
    text = (
        "–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥! üíî\n\n"
        "–ó–¥–µ—Å—å –∑–∞ –∫–∞–∂–¥—ã–π —Ñ–∞–∫–∞–ø ‚Äî –±–∞–ª–ª—ã.\n"
        "–ó–∞ –±–∞–ª–ª—ã ‚Äî —Ñ—É—Ç–±–æ–ª–∫–∞, –ø–∏—Ü—Ü–∞ –∏ –º–µ—Å—Ç–æ –≤ –ø–µ—Ä–≤–æ–º —Ä—è–¥—É.\n\n"
        "–í—Å—ë –ø—Ä–æ—Å—Ç–æ. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!"
    )
    # –£–¥–∞–ª—è–µ–º thinking message
    try:
        await bot.delete_message(chat_id=message.chat.id, message_id=thinking_msg.message_id)
    except Exception:
        pass
    await message.answer(text, reply_markup=get_main_kb(user))

@dp.message(Command("—á–µ–∫-–∏–Ω"))
async def cmd_checkin(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user = get_user(user_id)
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞!  /start!", reply_markup=main_kb)
        return
    visits = parse_visits(user['–î–∞—Ç—ã –ø–æ—Å–µ—â–µ–Ω–∏–π'])
    today = datetime.now().date()
    if visits and visits[-1] == today:
        kb = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–ü—Ä–æ–≥—Ä–µ—Å—Å")]],
            resize_keyboard=True
        )
        await message.answer("–¢—ã —É–∂–µ –æ—Ç–º–µ—á–∞–ª—Å—è —Å–µ–≥–æ–¥–Ω—è! ü¶∂", reply_markup=kb)
        return
    await message.answer("–ü—Ä–∏—à–ª–∏ —Å–µ–ª—Ñ–∏ –¥–ª—è —á–µ–∫-–∏–Ω–∞! üì∏", reply_markup=ReplyKeyboardRemove())
    await state.set_state(CheckinPhoto.waiting_for_photo)

@dp.message(CheckinPhoto.waiting_for_photo)
async def process_checkin_photo(message: Message, state: FSMContext):
    # –ï—Å–ª–∏ –ø—Ä–∏—à–ª–∞ –∫–æ–º–∞–Ω–¥–∞ ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–µ—Ä–µ–¥–∞—ë–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–ª—å—à–µ
    if message.text and message.text.startswith("/"):
        await state.clear()
        await dp.feed_update(message)
        return
    user_id = message.from_user.id
    user = get_user(user_id)
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞!  /start!", reply_markup=main_kb)
        await state.clear()
        return
    if not message.photo:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ! üì∑")
        return
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –ª–æ–∫–∞–ª—å–Ω–æ
    photo = message.photo[-1]
    file = await bot.get_file(photo.file_id)
    file_path = file.file_path
    local_path = f"checkin_{user_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.jpg"
    await bot.download_file(file_path, local_path)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±—ã—Å—Ç—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –±–æ—Ç –¥—É–º–∞–µ—Ç
    thinking_msg = await message.answer("–ë–æ—Ç –¥—É–º–∞–µ—Ç... ‚åõ")
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫—ç—à–µ (–±–µ–∑ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–æ—Ç–æ)
    visits = parse_visits(user['–î–∞—Ç—ã –ø–æ—Å–µ—â–µ–Ω–∏–π'])
    today = datetime.now().date()
    visits.append(today)
    balance = int(user['–ë–∞–ª–ª—ã']) + 1
    conds = get_conditions(user)
    conds[0] = True
    user['–§–æ—Ç–æ'] = 'yes'
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3 –ø–æ—Å–µ—â–µ–Ω–∏—è –ø–æ–¥—Ä—è–¥ (‚â§10 –¥–Ω–µ–π –º–µ–∂–¥—É –∫–∞–∂–¥—ã–º)
    if len(visits) >= 3:
        last3 = visits[-3:]
        if (last3[2] - last3[0]).days <= 20:
            if not conds[5]:
                balance += 1
                conds[5] = True
                user['3 –≤–∏–∑–∏—Ç–∞ –ø–æ–¥—Ä—è–¥'] = 'yes'
    user['–ë–∞–ª–ª—ã'] = balance
    user['–î–∞—Ç—ã –ø–æ—Å–µ—â–µ–Ω–∏–π'] = visits_to_str(visits)
    user['last_checkin_ts'] = datetime.now().isoformat()
    user['conditions_after_checkin'] = '0'
    update_user(user_id, user)
    await state.clear()
    # –î–æ–ª–≥–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏
    await _upload_photo_and_update_user(user_id, local_path)
    # Follow-up —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    await bot.send_message(
        chat_id=message.chat.id,
        text=f"–ß–µ–∫-–∏–Ω —Å —Å–µ–ª—Ñ–∏ –∑–∞—Å—á–∏—Ç–∞–Ω! –°–ø–∞—Å–∏–±–æ!\n+1 –≥—Ä–∞–±–ª—è\n\n<b>–í—Å–µ–≥–æ –≥—Ä–∞–±–ª–µ–π:</b> {balance}",
        reply_markup=get_main_kb(user),
        parse_mode="HTML"
    )
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ '–ë–æ—Ç –¥—É–º–∞–µ—Ç...'
    try:
        await bot.delete_message(chat_id=message.chat.id, message_id=thinking_msg.message_id)
    except Exception:
        pass

@dp.message(Command("–±–∞–ª–∞–Ω—Å"))
async def cmd_balance(message: Message):
    user_id = message.from_user.id
    user = get_user(user_id)
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞!  /start!", reply_markup=main_kb)
        return
    conds = get_conditions(user)
    to_next, reward = next_reward(int(user['–ë–∞–ª–ª—ã']))
    status = "–†–µ–∑–∏–¥–µ–Ω—Ç –ì—Ä–∞–±–ª–µ–π! üéñ" if all(conds) else "–ü–æ—á—ë—Ç–Ω—ã–π –≥–æ—Å—Ç—å üí´"
    text = (
        f"<b>–ë–∞–ª–∞–Ω—Å</b>: {user['–ë–∞–ª–ª—ã']}\n"
        f"{f'<b>–î–æ —Å–ª–µ–¥—É—é—â–µ–π –Ω–∞–≥—Ä–∞–¥—ã</b>: {to_next} ‚Äî {reward}' if to_next else '–¢—ã —Å–æ–±—Ä–∞–ª –≤—Å–µ –Ω–∞–≥—Ä–∞–¥—ã! ‚ù§Ô∏è'}\n"
        f"<b>–°—Ç–∞—Ç—É—Å</b>: {status}"
    )
    await message.answer(text, reply_markup=get_main_kb(user), parse_mode="HTML")

@dp.message(Command("–ø—Ä–æ–≥—Ä–µ—Å—Å"))
async def cmd_progress(message: Message):
    user_id = message.from_user.id
    user = get_user(user_id)
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞!  /start!", reply_markup=main_kb)
        return
    conds = get_conditions(user)
    text = "\n".join([
        f"{'‚úÖ' if done else '‚ùå'} {cond}" for done, cond in zip(conds, CONDITIONS)
    ])
    visits = ", ".join([str(d) for d in parse_visits(user['–î–∞—Ç—ã –ø–æ—Å–µ—â–µ–Ω–∏–π'])])
    await message.answer(
        "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å ‚Äî —Å–Ω–∞—á–∞–ª–∞ –∑–∞—á–µ–∫–∏–Ω—å—Å—è! ‚úîÔ∏è\n\n"
        f"<b>–¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å</b>:\n{text}\n\n<b>–î–∞—Ç—ã –≤–∏–∑–∏—Ç–æ–≤</b>: {visits if visits else '‚Äî'}",
        reply_markup=get_main_kb(user),
        parse_mode="HTML"
    )

@dp.message(Command("checkin"))
async def cmd_checkin_alias(message: Message):
    await cmd_checkin(message)

@dp.message(Command("balance"))
async def cmd_balance_alias(message: Message):
    await cmd_balance(message)

@dp.message(Command("progress"))
async def cmd_progress_buttons(message: Message):
    user_id = message.from_user.id
    user = get_user(user_id)
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞!  /start!", reply_markup=main_kb)
        return
    conds = get_conditions(user)
    text = "\n".join([
        f"{'‚úÖ' if done else '‚ùå'} {cond}" for done, cond in zip(conds, CONDITIONS)
    ])
    visits = ", ".join([str(d) for d in parse_visits(user['–î–∞—Ç—ã –ø–æ—Å–µ—â–µ–Ω–∏–π'])])
    # –ï—Å–ª–∏ –Ω–µ –±—ã–ª–æ —á–µ–∫-–∏–Ω–∞ ‚Äî –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    if not conds[0]:
        await message.answer(
            "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å ‚Äî —Å–Ω–∞—á–∞–ª–∞ –∑–∞—á–µ–∫–∏–Ω—å—Å—è! ‚úîÔ∏è\n\n"
            f"<b>–¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å</b>:\n{text}\n\n<b>–î–∞—Ç—ã –≤–∏–∑–∏—Ç–æ–≤</b>: {visits if visits else '‚Äî'}",
            reply_markup=get_main_kb(user),
            parse_mode="HTML"
        )
        return
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É—Å–ª–æ–≤–∏–π 2-5 + –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é
    buttons = []
    if not conds[1]:
        buttons.append([KeyboardButton(text="–ü—Ä–∏–≤—ë–ª –¥—Ä—É–≥–∞")])
    if not conds[2]:
        buttons.append([KeyboardButton(text="–ò—Å—Ç–æ—Ä–∏—è –∏–∑ –∑–∞–ª–∞")])
    if not conds[3]:
        buttons.append([KeyboardButton(text="–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–µ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ")])
    if not conds[4]:
        buttons.append([KeyboardButton(text="–§–æ—Ç–æ —Å —Ç–∞–±–ª–∏—á–∫–æ–π")])
    if buttons:
        buttons.append([KeyboardButton(text="‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")])
    kb = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True) if buttons else get_main_kb(user)
    await message.answer(
        "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å ‚Äî —Å–Ω–∞—á–∞–ª–∞ –∑–∞—á–µ–∫–∏–Ω—å—Å—è! ‚úîÔ∏è\n\n"
        f"<b>–¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å</b>:\n{text}\n\n<b>–î–∞—Ç—ã –≤–∏–∑–∏—Ç–æ–≤</b>: {visits if visits else '‚Äî'}",
        reply_markup=kb,
        parse_mode="HTML"
    )

@dp.message(lambda m: m.text == "–ó–∞—á–µ–∫–∏–Ω–∏—Ç—å—Å—è ‚úîÔ∏è")
async def handle_checkin_button(message: Message, state: FSMContext):
    await cmd_checkin(message, state)

@dp.message(lambda m: m.text == "–ü—Ä–æ–≥—Ä–µ—Å—Å ‚úèÔ∏è")
async def handle_progress_button(message: Message):
    user_id = message.from_user.id
    user = get_user(user_id)
    conds = get_conditions(user)
    text = "\n".join([
        f"{'‚úÖ' if done else '‚ùå'} {cond}" for done, cond in zip(conds, CONDITIONS)
    ])
    visits = ", ".join([str(d) for d in parse_visits(user['–î–∞—Ç—ã –ø–æ—Å–µ—â–µ–Ω–∏–π'])])
    if not conds[0]:
        await message.answer(
            "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å ‚Äî —Å–Ω–∞—á–∞–ª–∞ –∑–∞—á–µ–∫–∏–Ω—å—Å—è! ‚úîÔ∏è\n\n"
            f"<b>–¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å</b>:\n{text}\n\n<b>–î–∞—Ç—ã –≤–∏–∑–∏—Ç–æ–≤</b>: {visits if visits else '‚Äî'}",
            reply_markup=get_main_kb(user),
            parse_mode="HTML"
        )
        return
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É—Å–ª–æ–≤–∏–π 2-5 + –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é
    buttons = []
    if not conds[1]:
        buttons.append([KeyboardButton(text="–ü—Ä–∏–≤—ë–ª –¥—Ä—É–≥–∞")])
    if not conds[2]:
        buttons.append([KeyboardButton(text="–ò—Å—Ç–æ—Ä–∏—è –∏–∑ –∑–∞–ª–∞")])
    if not conds[3]:
        buttons.append([KeyboardButton(text="–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–µ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ")])
    if not conds[4]:
        buttons.append([KeyboardButton(text="–§–æ—Ç–æ —Å —Ç–∞–±–ª–∏—á–∫–æ–π")])
    if buttons:
        buttons.append([KeyboardButton(text="‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")])
    kb = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True) if buttons else get_main_kb(user)
    await message.answer(
        f"<b>–¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å</b>:\n{text}\n\n<b>–î–∞—Ç—ã –≤–∏–∑–∏—Ç–æ–≤</b>: {visits if visits else '‚Äî'}",
        reply_markup=kb,
        parse_mode="HTML"
    )

@dp.message(lambda m: m.text == "–ë–∞–ª–∞–Ω—Å üè¶")
async def handle_balance_button(message: Message):
    await cmd_balance(message)

@dp.message(lambda m: m.text == "‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def handle_back_to_menu(message: Message):
    user = get_user(message.from_user.id)
    await message.answer("–û–∫–µ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é...", reply_markup=get_main_kb(user))

@dp.message(lambda m: m.text == "–ü—Ä–∏–≤—ë–ª –¥—Ä—É–≥–∞")
async def handle_friend_brought(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user = get_user(user_id)
    conds = get_conditions(user)
    if conds[1]:
        await message.answer("–£–∂–µ –∑–∞—Å—á–∏—Ç–∞–Ω–æ! üòï", reply_markup=get_main_kb(user))
        return
    await message.answer("–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ —Å –¥—Ä—É–≥–æ–º –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è! ü§≥", reply_markup=ReplyKeyboardRemove())
    await state.set_state(FriendPhoto.waiting_for_photo)

@dp.message(FriendPhoto.waiting_for_photo)
async def process_friend_photo(message: Message, state: FSMContext):
    if message.text and message.text.startswith("/"):
        await state.clear()
        await dp.feed_update(message)
        return
    user_id = message.from_user.id
    user = get_user(user_id)
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞!  /start!", reply_markup=get_main_kb(user))
        await state.clear()
        return
    if not message.photo:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ —Å –¥—Ä—É–≥–æ–º! ü§≥")
        return
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –ª–æ–∫–∞–ª—å–Ω–æ
    photo = message.photo[-1]
    file = await bot.get_file(photo.file_id)
    file_path = file.file_path
    local_path = f"friend_{user_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.jpg"
    await bot.download_file(file_path, local_path)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±—ã—Å—Ç—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    thinking_msg = await message.answer("–ë–æ—Ç –¥—É–º–∞–µ—Ç... ‚åõ")
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –≤ Google Drive –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏
    from google_sheets import upload_photo_to_drive
    drive_link = upload_photo_to_drive(local_path, os.path.basename(local_path))
    os.remove(local_path)
    user = get_user(user_id)
    if user:
        user['–§–æ—Ç–æ —Å –¥—Ä—É–≥–æ–º'] = drive_link
        user['–ë–∞–ª–ª—ã'] = int(user['–ë–∞–ª–ª—ã']) + 1
        user['–ü—Ä–∏–≤–µ–ª –¥—Ä—É–≥–∞'] = 'yes'
        user['last_condition_ts'] = datetime.now().isoformat()
        user['conditions_after_checkin'] = str(int(user.get('conditions_after_checkin', '0')) + 1)
        update_user(user_id, user)
    await state.clear()
    await bot.send_message(
        chat_id=message.chat.id,
        text="–§–æ—Ç–æ —Å –¥—Ä—É–≥–æ–º –∑–∞—Å—á–∏—Ç–∞–Ω–æ! +1 –≥—Ä–∞–±–ª—è üèÖ",
        reply_markup=get_main_kb(user)
    )
    try:
        await bot.delete_message(chat_id=message.chat.id, message_id=thinking_msg.message_id)
    except Exception:
        pass

@dp.message(lambda m: m.text == "–ò—Å—Ç–æ—Ä–∏—è –∏–∑ –∑–∞–ª–∞")
async def handle_story(message: Message):
    user_id = message.from_user.id
    user = get_user(user_id)
    conds = get_conditions(user)
    can_do, msg = can_perform_condition(user)
    if not can_do:
        await message.answer(msg or "–°–Ω–∞—á–∞–ª–∞ –∑–∞—á–µ–∫–∏–Ω—å—Å—è!", reply_markup=get_main_kb(user))
        return
    if not conds[2]:
        conds[2] = True
        user['–ë–∞–ª–ª—ã'] = int(user['–ë–∞–ª–ª—ã']) + 1
        user['–ò—Å—Ç–æ—Ä–∏—è'] = 'yes'
        user['last_condition_ts'] = datetime.now().isoformat()
        user['conditions_after_checkin'] = str(int(user.get('conditions_after_checkin', '0')) + 1)
        update_user(user_id, user)
        await message.answer("–ò—Å—Ç–æ—Ä–∏—è –∏–∑ –∑–∞–ª–∞ –∑–∞—Å—á–∏—Ç–∞–Ω–æ! +1 –≥—Ä–∞–±–ª—è üèÖ", reply_markup=get_main_kb(user))
    else:
        await message.answer("–£–∂–µ –∑–∞—Å—á–∏—Ç–∞–Ω–æ! üòï", reply_markup=get_main_kb(user))

@dp.message(lambda m: m.text == "–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–µ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ")
async def handle_performance(message: Message):
    user_id = message.from_user.id
    user = get_user(user_id)
    conds = get_conditions(user)
    if not conds[3]:
        conds[3] = True
        user['–ë–∞–ª–ª—ã'] = int(user['–ë–∞–ª–ª—ã']) + 2
        user['–í—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ'] = 'yes'
        user['last_condition_ts'] = datetime.now().isoformat()
        user['conditions_after_checkin'] = str(int(user.get('conditions_after_checkin', '0')) + 1)
        update_user(user_id, user)
        await message.answer("–í—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∑–∞—Å—á–∏—Ç–∞–Ω–æ! +2 –≥—Ä–∞–±–ª–∏ üé§", reply_markup=get_main_kb(user))
    else:
        await message.answer("–£–∂–µ –∑–∞—Å—á–∏—Ç–∞–Ω–æ! üòï", reply_markup=get_main_kb(user))

@dp.message(lambda m: m.text == "–§–æ—Ç–æ —Å —Ç–∞–±–ª–∏—á–∫–æ–π / —Å –¥—Ä—É–≥–æ–º" or m.text == "–§–æ—Ç–æ —Å —Ç–∞–±–ª–∏—á–∫–æ–π")
async def handle_photo_with_sign(message: Message):
    user_id = message.from_user.id
    user = get_user(user_id)
    conds = get_conditions(user)
    if not conds[4]:
        conds[4] = True
        user['–ë–∞–ª–ª—ã'] = int(user['–ë–∞–ª–ª—ã']) + 1
        user['–§–æ—Ç–æ —Å —Ç–∞–±–ª–∏—á–∫–æ–π'] = 'yes'
        user['last_condition_ts'] = datetime.now().isoformat()
        user['conditions_after_checkin'] = str(int(user.get('conditions_after_checkin', '0')) + 1)
        update_user(user_id, user)
        await message.answer("–§–æ—Ç–æ —Å —Ç–∞–±–ª–∏—á–∫–æ–π –∑–∞—Å—á–∏—Ç–∞–Ω–æ! +1 –≥—Ä–∞–±–ª—è üèÖ", reply_markup=get_main_kb(user))
    else:
        await message.answer("–£–∂–µ –∑–∞—Å—á–∏—Ç–∞–Ω–æ! üòï", reply_markup=get_main_kb(user))

@dp.message(Command("delete"))
async def cmd_delete(message: Message):
    if message.from_user.id not in ADMINS:
        return
    args = message.text.split()
    if len(args) != 2 or not args[1].lstrip("@").isalnum():
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /delete @username –∏–ª–∏ /delete username")
        return
    username = args[1].lstrip("@")
    # –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω—É
    thinking_msg = await message.answer("–ë–æ—Ç –¥—É–º–∞–µ—Ç... ‚åõ")
    user, source = get_user_by_username_anywhere(username)
    if not user:
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {args[1]} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –Ω–µ–≥–æ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username.")
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=thinking_msg.message_id)
        except Exception:
            pass
        return
    # –£–¥–∞–ª—è–µ–º –∏–∑ –∫—ç—à–∞ –∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
    deleted_cache = delete_user_by_username(username)
    deleted_sheet = False
    if user:
        deleted_sheet = delete_user_by_telegram_id(int(user['Telegram ID']))
    load_users_cache()
    await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã (–∫—ç—à: {deleted_cache}, —Ç–∞–±–ª–∏—Ü–∞: {deleted_sheet}). –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω. (–ò—Å—Ç–æ—á–Ω–∏–∫: {source})")
    try:
        await bot.delete_message(chat_id=message.chat.id, message_id=thinking_msg.message_id)
    except Exception:
        pass

@dp.message(Command("admin"))
async def cmd_admin(message: Message):
    if message.from_user.id not in ADMINS:
        return
    text = (
        "<b>–ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "/add @username N ‚Äî –¥–æ–±–∞–≤–∏—Ç—å N –±–∞–ª–ª–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫—É\n"
        "/check @username ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞\n"
        "/broadcast —Ç–µ–∫—Å—Ç ‚Äî —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º\n"
        "/residentify @username ‚Äî –ø—Ä–∏—Å–≤–æ–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞\n"
        "/delete @username ‚Äî —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å"
    )
    await message.answer(text, parse_mode="HTML")

@dp.message(Command("myid"))
async def cmd_myid(message: Message):
    await message.answer(f"–í–∞—à Telegram ID: {message.from_user.id}")

@dp.message(Command("add"))
async def cmd_add(message: Message):
    if message.from_user.id not in ADMINS:
        return
    args = message.text.split()
    if len(args) != 3 or not args[1].lstrip("@").isalnum() or not args[2].isdigit():
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /add @username N –∏–ª–∏ /add username N")
        return
    username = args[1].lstrip("@")
    n = int(args[2])
    user, source = get_user_by_username_anywhere(username)
    if not user:
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {args[1]} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –Ω–µ–≥–æ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username.")
        return
    if not user.get('–ù–∏–∫–Ω–µ–π–º'):
        await message.answer(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç username. –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")
        return
    user['–ë–∞–ª–ª—ã'] = int(user['–ë–∞–ª–ª—ã']) + n
    user['last_condition_ts'] = datetime.now().isoformat()
    user['conditions_after_checkin'] = '0'
    update_user(user['Telegram ID'], user)
    await message.answer(f"@{username}: +{n} –±–∞–ª–ª–æ–≤. –¢–µ–ø–µ—Ä—å {user['–ë–∞–ª–ª—ã']} –±–∞–ª–ª–æ–≤. (–ò—Å—Ç–æ—á–Ω–∏–∫: {source})")

@dp.message(Command("check"))
async def cmd_check(message: Message):
    if message.from_user.id not in ADMINS:
        return
    args = message.text.split()
    if len(args) != 2 or not args[1].lstrip("@").isalnum():
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /check @username –∏–ª–∏ /check username")
        return
    username = args[1].lstrip("@")
    user, source = get_user_by_username_anywhere(username)
    if not user:
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {args[1]} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –Ω–µ–≥–æ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username.")
        return
    text = (
        f"<b>@{username}</b>\n"
        f"–ò–º—è: {user['–ò–º—è']}\n"
        f"–ë–∞–ª–ª—ã: {user['–ë–∞–ª–ª—ã']}\n"
        f"–î–∞—Ç—ã –ø–æ—Å–µ—â–µ–Ω–∏–π: {user['–î–∞—Ç—ã –ø–æ—Å–µ—â–µ–Ω–∏–π']}\n"
        f"–†–µ–∑–∏–¥–µ–Ω—Ç: {'yes' if user.get('–†–µ–∑–∏–¥–µ–Ω—Ç') == 'yes' else 'no'}\n"
        f"–§–æ—Ç–æ: {user.get('–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ', '‚Äî') or '‚Äî'}\n"
        f"<i>–ò—Å—Ç–æ—á–Ω–∏–∫: {source}</i>"
    )
    await message.answer(text, parse_mode="HTML")

@dp.message(Command("broadcast"))
async def cmd_broadcast(message: Message):
    if message.from_user.id not in ADMINS:
        return
    args = message.text.split(maxsplit=1)
    if len(args) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /broadcast —Ç–µ–∫—Å—Ç")
        return
    text = args[1]
    count = 0
    for user in users_cache.values():
        try:
            await bot.send_message(user['Telegram ID'], text)
            count += 1
        except Exception:
            pass
    await message.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

@dp.message(Command("residentify"))
async def cmd_residentify(message: Message):
    if message.from_user.id not in ADMINS:
        return
    args = message.text.split()
    if len(args) != 2 or not args[1].lstrip("@").isalnum():
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /residentify @username –∏–ª–∏ /residentify username")
        return
    username = args[1].lstrip("@")
    user, source = get_user_by_username_anywhere(username)
    if not user:
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {args[1]} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –Ω–µ–≥–æ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username.")
        return
    user['–†–µ–∑–∏–¥–µ–Ω—Ç'] = 'yes'
    user['last_condition_ts'] = datetime.now().isoformat()
    user['conditions_after_checkin'] = '0'
    update_user(user['Telegram ID'], user)
    await message.answer(f"@{username} —Ç–µ–ø–µ—Ä—å —Ä–µ–∑–∏–¥–µ–Ω—Ç! (–ò—Å—Ç–æ—á–Ω–∏–∫: {source})")

async def main(context):
    try:
        context.log(f"Received request: {context.req.method} {context.req.path}")
        context.log(f"Context dir: {dir(context)}")
        if hasattr(context, 'req'):
            context.log(f"Context.req dir: {dir(context.req)}")
        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        request_body = None
        if hasattr(context, 'req_body'):
            request_body = context.req_body
        elif hasattr(context, 'req') and hasattr(context.req, 'body'):
            request_body = context.req.body
        elif hasattr(context, 'data'):
            request_body = context.data
        elif hasattr(context, 'req') and hasattr(context.req, 'json'):
            # –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ async-–º–µ—Ç–æ–¥
            try:
                request_body = await context.req.json()
            except Exception as e:
                context.error(f"context.req.json() error: {e}")
        if request_body is None:
            context.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞!")
            return context.res.json({"error": "No request body found"}, 400)
        context.log(f"Request body: {request_body}")
        update = Update.model_validate(request_body)
        await dp.feed_update(bot, update)
        return context.res.json({"status": "ok"})
    except Exception as e:
        context.error(f"Error: {e}")
        return context.res.json({"error": str(e)})

# –í –∫–∞–∂–¥–æ–º —Ö–µ–Ω–¥–ª–µ—Ä–µ —É—Å–ª–æ–≤–∏—è (–∫—Ä–æ–º–µ —á–µ–∫-–∏–Ω–∞) ‚Äî –ø—Ä–æ–≤–µ—Ä—è—é —Ç–∞–π–º–∞—É—Ç
TIMEOUT_MINUTES = 15
TIMEOUT_MSG = "–û–π-–æ–π! –¢—ã —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ –Ω–∞–±–∏—Ä–∞–µ—à—å –±–∞–ª–ª—ã, –¥–∞–π —Å–µ–±–µ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å üòÆ‚Äçüí®\n–ü–æ–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è!"

def can_perform_condition(user):
    # –ï—Å–ª–∏ –Ω–µ—Ç —á–µ–∫-–∏–Ω–∞ ‚Äî –Ω–µ–ª—å–∑—è
    visits = parse_visits(user['–î–∞—Ç—ã –ø–æ—Å–µ—â–µ–Ω–∏–π'])
    today = datetime.now().date()
    if not (visits and visits[-1] == today):
        return False, None
    # –ï—Å–ª–∏ –ø–æ—Å–ª–µ —á–µ–∫-–∏–Ω–∞ –Ω–µ –±—ã–ª–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —É—Å–ª–æ–≤–∏—è ‚Äî –º–æ–∂–Ω–æ
    if str(user.get('conditions_after_checkin', '0')) == '0':
        return True, None
    # –ï—Å–ª–∏ —É–∂–µ –±—ã–ª–æ –æ–¥–Ω–æ —É—Å–ª–æ–≤–∏–µ ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç
    last_ts = user.get('last_condition_ts')
    if not last_ts:
        return True, None
    try:
        last_dt = datetime.fromisoformat(last_ts)
    except Exception:
        return True, None
    if datetime.now() - last_dt < timedelta(minutes=TIMEOUT_MINUTES):
        return False, TIMEOUT_MSG
    return True, None 